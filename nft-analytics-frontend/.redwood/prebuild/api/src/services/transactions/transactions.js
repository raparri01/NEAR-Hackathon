import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js/instance/for-each";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js/instance/slice";
import _Object$keys from "@babel/runtime-corejs3/core-js/object/keys";
import _reverseInstanceProperty from "@babel/runtime-corejs3/core-js/instance/reverse";
import axios from 'axios';
export const transactionsForApp = async ({
  appName
}) => {
  var _context3;
  const res = await axios.get(`https://backend-mainnet-1713.onrender.com/trpc/transaction.listByAccountId?batch=1&input=%7B%220%22%3A%7B%22accountId%22%3A%22${appName}%22%2C%22limit%22%3A9999%2C%22cursor%22%3A%7B%22timestamp%22%3A%221667076711696785617%22%2C%22indexInChunk%22%3A3%7D%7D%7D`);
  const price = [];
  const tempTransactions = [];
  const transactions = [];
  const items = res?.data[0]?.result?.data?.items || [];
  _forEachInstanceProperty(items).call(items, item => {
    if (item?.actions[0].kind === 'transfer') {
      var _context, _context2;
      price.push({
        value: (item?.actions[0].args.deposit / 1000000000000000000000000).toFixed(2),
        timestamp: _sliceInstanceProperty(_context = new Date(item.blockTimestamp).toISOString()).call(_context, 0, 10)
      });
      tempTransactions.push({
        value: (item?.actions[0].args.deposit / 1000000000000000000000000).toFixed(2),
        timestamp: _sliceInstanceProperty(_context2 = new Date(item.blockTimestamp).toISOString()).call(_context2, 0, 10)
      });
    }
  });
  const transactionsObject = {};
  _forEachInstanceProperty(tempTransactions).call(tempTransactions, item => {
    transactionsObject[item.timestamp] = transactionsObject[item.timestamp] ? transactionsObject[item.timestamp] + 1 : 1;
  });
  _forEachInstanceProperty(_context3 = _Object$keys(transactionsObject)).call(_context3, key => {
    transactions.push({
      value: transactionsObject[key],
      timestamp: key
    });
  });
  return {
    price: _reverseInstanceProperty(price).call(price),
    transactions: _reverseInstanceProperty(transactions).call(transactions)
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheGlvcyIsInRyYW5zYWN0aW9uc0ZvckFwcCIsImFwcE5hbWUiLCJyZXMiLCJnZXQiLCJwcmljZSIsInRlbXBUcmFuc2FjdGlvbnMiLCJ0cmFuc2FjdGlvbnMiLCJpdGVtcyIsImRhdGEiLCJyZXN1bHQiLCJpdGVtIiwiYWN0aW9ucyIsImtpbmQiLCJwdXNoIiwidmFsdWUiLCJhcmdzIiwiZGVwb3NpdCIsInRvRml4ZWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwiYmxvY2tUaW1lc3RhbXAiLCJ0b0lTT1N0cmluZyIsInRyYW5zYWN0aW9uc09iamVjdCIsImtleSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2FwaS9zcmMvc2VydmljZXMvdHJhbnNhY3Rpb25zL3RyYW5zYWN0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5cbmV4cG9ydCBjb25zdCB0cmFuc2FjdGlvbnNGb3JBcHAgPSBhc3luYyAoeyBhcHBOYW1lIH0pID0+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KFxuICAgIGBodHRwczovL2JhY2tlbmQtbWFpbm5ldC0xNzEzLm9ucmVuZGVyLmNvbS90cnBjL3RyYW5zYWN0aW9uLmxpc3RCeUFjY291bnRJZD9iYXRjaD0xJmlucHV0PSU3QiUyMjAlMjIlM0ElN0IlMjJhY2NvdW50SWQlMjIlM0ElMjIke2FwcE5hbWV9JTIyJTJDJTIybGltaXQlMjIlM0E5OTk5JTJDJTIyY3Vyc29yJTIyJTNBJTdCJTIydGltZXN0YW1wJTIyJTNBJTIyMTY2NzA3NjcxMTY5Njc4NTYxNyUyMiUyQyUyMmluZGV4SW5DaHVuayUyMiUzQTMlN0QlN0QlN0RgXG4gIClcbiAgY29uc3QgcHJpY2UgPSBbXVxuICBjb25zdCB0ZW1wVHJhbnNhY3Rpb25zID0gW11cbiAgY29uc3QgdHJhbnNhY3Rpb25zID0gW11cbiAgY29uc3QgaXRlbXMgPSByZXM/LmRhdGFbMF0/LnJlc3VsdD8uZGF0YT8uaXRlbXMgfHwgW11cbiAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtPy5hY3Rpb25zWzBdLmtpbmQgPT09ICd0cmFuc2ZlcicpIHtcbiAgICAgIHByaWNlLnB1c2goe1xuICAgICAgICB2YWx1ZTogKFxuICAgICAgICAgIGl0ZW0/LmFjdGlvbnNbMF0uYXJncy5kZXBvc2l0IC8gMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFxuICAgICAgICApLnRvRml4ZWQoMiksXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoaXRlbS5ibG9ja1RpbWVzdGFtcCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCksXG4gICAgICB9KVxuICAgICAgdGVtcFRyYW5zYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgdmFsdWU6IChcbiAgICAgICAgICBpdGVtPy5hY3Rpb25zWzBdLmFyZ3MuZGVwb3NpdCAvIDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcbiAgICAgICAgKS50b0ZpeGVkKDIpLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKGl0ZW0uYmxvY2tUaW1lc3RhbXApLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApLFxuICAgICAgfSlcbiAgICB9XG4gIH0pXG4gIGNvbnN0IHRyYW5zYWN0aW9uc09iamVjdCA9IHt9XG4gIHRlbXBUcmFuc2FjdGlvbnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIHRyYW5zYWN0aW9uc09iamVjdFtpdGVtLnRpbWVzdGFtcF0gPSB0cmFuc2FjdGlvbnNPYmplY3RbaXRlbS50aW1lc3RhbXBdXG4gICAgICA/IHRyYW5zYWN0aW9uc09iamVjdFtpdGVtLnRpbWVzdGFtcF0gKyAxXG4gICAgICA6IDFcbiAgfSlcbiAgT2JqZWN0LmtleXModHJhbnNhY3Rpb25zT2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICB0cmFuc2FjdGlvbnMucHVzaCh7XG4gICAgICB2YWx1ZTogdHJhbnNhY3Rpb25zT2JqZWN0W2tleV0sXG4gICAgICB0aW1lc3RhbXA6IGtleSxcbiAgICB9KVxuICB9KVxuICByZXR1cm4geyBwcmljZTogcHJpY2UucmV2ZXJzZSgpLCB0cmFuc2FjdGlvbnM6IHRyYW5zYWN0aW9ucy5yZXZlcnNlKCkgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBT0EsS0FBSyxNQUFNLE9BQU87QUFFekIsT0FBTyxNQUFNQyxrQkFBa0IsR0FBRyxPQUFPO0VBQUVDO0FBQVEsQ0FBQyxLQUFLO0VBQUE7RUFDdkQsTUFBTUMsR0FBRyxHQUFHLE1BQU1ILEtBQUssQ0FBQ0ksR0FBRyxDQUN4QixpSUFBZ0lGLE9BQVEsNEhBQTJILENBQ3JRO0VBQ0QsTUFBTUcsS0FBSyxHQUFHLEVBQUU7RUFDaEIsTUFBTUMsZ0JBQWdCLEdBQUcsRUFBRTtFQUMzQixNQUFNQyxZQUFZLEdBQUcsRUFBRTtFQUN2QixNQUFNQyxLQUFLLEdBQUdMLEdBQUcsRUFBRU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFQyxNQUFNLEVBQUVELElBQUksRUFBRUQsS0FBSyxJQUFJLEVBQUU7RUFDckQseUJBQUFBLEtBQUssT0FBTEEsS0FBSyxFQUFVRyxJQUFJLElBQUs7SUFDdEIsSUFBSUEsSUFBSSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNDLElBQUksS0FBSyxVQUFVLEVBQUU7TUFBQTtNQUN4Q1IsS0FBSyxDQUFDUyxJQUFJLENBQUM7UUFDVEMsS0FBSyxFQUFFLENBQ0xKLElBQUksRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDSSxJQUFJLENBQUNDLE9BQU8sR0FBRyx5QkFBeUIsRUFDekRDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWkMsU0FBUyxFQUFFLHNDQUFJQyxJQUFJLENBQUNULElBQUksQ0FBQ1UsY0FBYyxDQUFDLENBQUNDLFdBQVcsRUFBRSxpQkFBTyxDQUFDLEVBQUUsRUFBRTtNQUNwRSxDQUFDLENBQUM7TUFDRmhCLGdCQUFnQixDQUFDUSxJQUFJLENBQUM7UUFDcEJDLEtBQUssRUFBRSxDQUNMSixJQUFJLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQ0ksSUFBSSxDQUFDQyxPQUFPLEdBQUcseUJBQXlCLEVBQ3pEQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ1pDLFNBQVMsRUFBRSx1Q0FBSUMsSUFBSSxDQUFDVCxJQUFJLENBQUNVLGNBQWMsQ0FBQyxDQUFDQyxXQUFXLEVBQUUsa0JBQU8sQ0FBQyxFQUFFLEVBQUU7TUFDcEUsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDLENBQUM7RUFDRixNQUFNQyxrQkFBa0IsR0FBRyxDQUFDLENBQUM7RUFDN0IseUJBQUFqQixnQkFBZ0IsT0FBaEJBLGdCQUFnQixFQUFVSyxJQUFJLElBQUs7SUFDakNZLGtCQUFrQixDQUFDWixJQUFJLENBQUNRLFNBQVMsQ0FBQyxHQUFHSSxrQkFBa0IsQ0FBQ1osSUFBSSxDQUFDUSxTQUFTLENBQUMsR0FDbkVJLGtCQUFrQixDQUFDWixJQUFJLENBQUNRLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FDdEMsQ0FBQztFQUNQLENBQUMsQ0FBQztFQUNGLGtEQUFZSSxrQkFBa0IsQ0FBQyxrQkFBVUMsR0FBRyxJQUFLO0lBQy9DakIsWUFBWSxDQUFDTyxJQUFJLENBQUM7TUFDaEJDLEtBQUssRUFBRVEsa0JBQWtCLENBQUNDLEdBQUcsQ0FBQztNQUM5QkwsU0FBUyxFQUFFSztJQUNiLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUNGLE9BQU87SUFBRW5CLEtBQUssRUFBRSx5QkFBQUEsS0FBSyxPQUFMQSxLQUFLLENBQVU7SUFBRUUsWUFBWSxFQUFFLHlCQUFBQSxZQUFZLE9BQVpBLFlBQVk7RUFBVyxDQUFDO0FBQ3pFLENBQUMifQ==