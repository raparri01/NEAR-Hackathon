// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftTotal(): i32 {
    let value = this.get("nftTotal");
    return value!.toI32();
  }

  set nftTotal(value: i32) {
    this.set("nftTotal", Value.fromI32(value));
  }

  get nftTransfers(): i32 {
    let value = this.get("nftTransfers");
    return value!.toI32();
  }

  set nftTransfers(value: i32) {
    this.set("nftTransfers", Value.fromI32(value));
  }
}

export class UnhandledAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnhandledAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UnhandledAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UnhandledAction", id.toString(), this);
    }
  }

  static load(id: string): UnhandledAction | null {
    return changetype<UnhandledAction | null>(store.get("UnhandledAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get method(): string | null {
    let value = this.get("method");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set method(value: string | null) {
    if (!value) {
      this.unset("method");
    } else {
      this.set("method", Value.fromString(<string>value));
    }
  }

  get kind(): string | null {
    let value = this.get("kind");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set kind(value: string | null) {
    if (!value) {
      this.unset("kind");
    } else {
      this.set("kind", Value.fromString(<string>value));
    }
  }

  get log(): string | null {
    let value = this.get("log");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set log(value: string | null) {
    if (!value) {
      this.unset("log");
    } else {
      this.set("log", Value.fromString(<string>value));
    }
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Collection entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class Buy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Buy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Buy entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Buy", id.toString(), this);
    }
  }

  static load(id: string): Buy | null {
    return changetype<Buy | null>(store.get("Buy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyer(): string | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyer(value: string | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromString(<string>value));
    }
  }

  get price(): string | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set price(value: string | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromString(<string>value));
    }
  }

  get log(): string | null {
    let value = this.get("log");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set log(value: string | null) {
    if (!value) {
      this.unset("log");
    } else {
      this.set("log", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get receiver(): string | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiver(value: string | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromString(<string>value));
    }
  }

  get sender(): string | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sender(value: string | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromString(<string>value));
    }
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data(): string | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastSalePrice(): i32 {
    let value = this.get("lastSalePrice");
    return value!.toI32();
  }

  set lastSalePrice(value: i32) {
    this.set("lastSalePrice", Value.fromI32(value));
  }
}

export class SetSeriesPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SetSeriesPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SetSeriesPrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SetSeriesPrice", id.toString(), this);
    }
  }

  static load(id: string): SetSeriesPrice | null {
    return changetype<SetSeriesPrice | null>(store.get("SetSeriesPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data(): string | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(<string>value));
    }
  }
}

export class NftVolumeDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftVolumeDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NftVolumeDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NftVolumeDayData", id.toString(), this);
    }
  }

  static load(id: string): NftVolumeDayData | null {
    return changetype<NftVolumeDayData | null>(
      store.get("NftVolumeDayData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt | null {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt | null) {
    if (!value) {
      this.unset("date");
    } else {
      this.set("date", Value.fromBigInt(<BigInt>value));
    }
  }

  get volume(): BigInt | null {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt | null) {
    if (!value) {
      this.unset("volume");
    } else {
      this.set("volume", Value.fromBigInt(<BigInt>value));
    }
  }

  get averagePrice(): BigInt | null {
    let value = this.get("averagePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averagePrice(value: BigInt | null) {
    if (!value) {
      this.unset("averagePrice");
    } else {
      this.set("averagePrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalActionCount(): BigInt | null {
    let value = this.get("totalActionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalActionCount(value: BigInt | null) {
    if (!value) {
      this.unset("totalActionCount");
    } else {
      this.set("totalActionCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get collection(): BigInt | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collection(value: BigInt | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class NftVolumeHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftVolumeHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NftVolumeHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NftVolumeHourData", id.toString(), this);
    }
  }

  static load(id: string): NftVolumeHourData | null {
    return changetype<NftVolumeHourData | null>(
      store.get("NftVolumeHourData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt | null {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt | null) {
    if (!value) {
      this.unset("date");
    } else {
      this.set("date", Value.fromBigInt(<BigInt>value));
    }
  }

  get volume(): BigInt | null {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt | null) {
    if (!value) {
      this.unset("volume");
    } else {
      this.set("volume", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalActionCount(): BigInt | null {
    let value = this.get("totalActionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalActionCount(value: BigInt | null) {
    if (!value) {
      this.unset("totalActionCount");
    } else {
      this.set("totalActionCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get averagePrice(): BigInt | null {
    let value = this.get("averagePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averagePrice(value: BigInt | null) {
    if (!value) {
      this.unset("averagePrice");
    } else {
      this.set("averagePrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get collection(): BigInt | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collection(value: BigInt | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class CollectionVolumeDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectionVolumeDayData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CollectionVolumeDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CollectionVolumeDayData", id.toString(), this);
    }
  }

  static load(id: string): CollectionVolumeDayData | null {
    return changetype<CollectionVolumeDayData | null>(
      store.get("CollectionVolumeDayData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt | null {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt | null) {
    if (!value) {
      this.unset("date");
    } else {
      this.set("date", Value.fromBigInt(<BigInt>value));
    }
  }

  get volume(): BigInt | null {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt | null) {
    if (!value) {
      this.unset("volume");
    } else {
      this.set("volume", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalActionCount(): BigInt | null {
    let value = this.get("totalActionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalActionCount(value: BigInt | null) {
    if (!value) {
      this.unset("totalActionCount");
    } else {
      this.set("totalActionCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get averagePrice(): BigInt | null {
    let value = this.get("averagePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averagePrice(value: BigInt | null) {
    if (!value) {
      this.unset("averagePrice");
    } else {
      this.set("averagePrice", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class CollectionVolumeHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectionVolumeHourData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CollectionVolumeHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CollectionVolumeHourData", id.toString(), this);
    }
  }

  static load(id: string): CollectionVolumeHourData | null {
    return changetype<CollectionVolumeHourData | null>(
      store.get("CollectionVolumeHourData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt | null {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt | null) {
    if (!value) {
      this.unset("date");
    } else {
      this.set("date", Value.fromBigInt(<BigInt>value));
    }
  }

  get volume(): BigInt | null {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt | null) {
    if (!value) {
      this.unset("volume");
    } else {
      this.set("volume", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalActionCount(): BigInt | null {
    let value = this.get("totalActionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalActionCount(value: BigInt | null) {
    if (!value) {
      this.unset("totalActionCount");
    } else {
      this.set("totalActionCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get averagePrice(): BigInt | null {
    let value = this.get("averagePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averagePrice(value: BigInt | null) {
    if (!value) {
      this.unset("averagePrice");
    } else {
      this.set("averagePrice", Value.fromBigInt(<BigInt>value));
    }
  }
}
